generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime @default(now())
  carts          Cart[]
  orders         Order[]
  sessionLogs    SessionLog[]
  // NextAuth relations
  accounts       Account[]
  sessions       Session[]
}

model Product {
  name        String
  description String
  price       Float
  imageUrl    String
  category    String
  stock       Int         @default(100)
  id          Int         @id @default(autoincrement())
  carts       Cart[]
  orderItems  OrderItem[]
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Order {
  total         Float
  createdAt     DateTime    @default(now())
  customerName  String
  customerEmail String
  id            Int         @id @default(autoincrement())
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  quantity  Int
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model SessionLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // 'login' o 'logout'
  provider  String?
  timestamp DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("session_logs")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
